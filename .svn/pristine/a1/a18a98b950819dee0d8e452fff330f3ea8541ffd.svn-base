using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using XDD.Core.DataAccess;
using XDD.Core.Model;

namespace XDD.Web.Controllers
{
    public class AgentController : Controller
    {
        XDDDbContext Context = new XDDDbContext();
        /// <summary>
        /// 代理列表
        /// </summary>
        /// <returns></returns>
        [Authorize(Roles = "管理员")]
        public ActionResult Index()
        {
            return View();
        }

        public JsonResult Get(string keyword, int page = 1, int rows = 15)
        {
            IQueryable<Member> query = Context.Members;
            if (!string.IsNullOrEmpty(keyword))
            {
                query = query.Where(s => s.NickName.Contains(keyword) || s.RealName.Contains(keyword) || s.PlatformBindPhone.Contains(keyword) || s.WeChatBindPhone.Contains(keyword));
            }
            return Json(new
            {
                total = query.Count(),
                rows = query.OrderBy(s => s.NickName).Skip((page - 1) * rows).Take(rows).Select(s => new
                {
                    s.Id,
                    s.AppOpenId,
                    s.WebOpenId,
                    s.UnionId,
                    s.NickName,
                    s.AvatarUrl,
                    s.RealName,
                    s.Sex,
                    s.Country,
                    s.Province,
                    s.City,
                    s.WeChatBindPhone,
                    s.PlatformBindPhone,
                    s.Account,
                    s.Session_key,
                    s.Status,
                    s.CaptainId,
                    s.IsVirtualMember,
                    s.RowVersion,

                }).ToList()
            }, JsonRequestBehavior.AllowGet);

        }
        public JsonResult Order(DateTime? start, DateTime? end, string keyword = null, int page = 1, int rows = 10)
        {
            XDDDbContext ctx = new XDDDbContext();
            List<TicketOrder> list = new List<TicketOrder>();
            IQueryable<TicketOrder> query;
            query = ctx.TicketOrders;
            if (start.HasValue)
            {
                query = query.Where(s => s.CreateTime >= start.Value);
            }
            if (end.HasValue)
            {
                end = end.Value.AddDays(1);
                query = query.Where(s => s.CreateTime < end.Value);
            }
            if (!string.IsNullOrEmpty(keyword))
            {
                query = ctx.TicketOrders;
                //没有传递keyword或者keyword为""
            }
            else
            {
                //有传递keyword并且keyword的值不为空字符串
                query = ctx.TicketOrders.Where(s => s.OrderNum.Contains(keyword));
            }//查询
            return Json(
            new
            {
                total = query.Count(),
                rows = query.OrderByDescending(s => s.CreateTime).Skip((page - 1) * rows).Take(rows).ToList().Select(s => new
                {

                    s.Id,
                    s.OrderNum,
                    s.OrderPrice,
                    s.Price,
                    s.Detail,
                    s.Description,
                    s.CreateTime,
                    s.Status,
                    s.TicketPackageId,
                    TicketPackageName = s.TicketPackageId == null ? null : s.TicetPackage.Name,
                    s.SupplierId,
                    MemberName = s.MemberId == null ? null : s.Member.NickName,
                    s.MemberId,
                    s.L1AgentCharges,
                    s.L2AgentCharges,
                    s.L2AgentChargesPercent,
                    s.L2BalanceCharges,
                    s.DeliveryPrice,
                    s.AgentId,
                    s.RowVersion
                    //获取数据
                })

            }, JsonRequestBehavior.AllowGet);
        }

    }
}

