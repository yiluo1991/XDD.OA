using System;
using System.Collections.Generic;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Configuration;
using System.Web.Mvc;
using XDD.Core.DataAccess;
using XDD.Core.Model;
using XDD.Web.Infrastructure;

namespace XDD.Web.Controllers
{
    public class BBSArticleController : Controller
    {
        XDDDbContext Context = new XDDDbContext();
        // GET: BBSArticle
        public ActionResult Index()
        {
            return View();
        }
        public JsonResult Remove(Int32 Id)
        {
            XDDDbContext ctx = new XDDDbContext();
            var target = ctx.BBSArticles.FirstOrDefault(s => s.Id == Id);
            if (target == null)
            {
                return Json(new { ResultCode = 0, message = "没有找到图片" });
            }
            else
            {
                ctx.BBSArticles.Remove(target);
                ctx.SaveChanges();
                return Json(new { ResultCode = 1, message = "删除成功" });
            }
        }

        public JsonResult AllowGet(string keyword, int categoryId = 0, int page = 1, int rows = 15)//搜索

        {
            IQueryable<BBSArticle> query = Context.BBSArticles;
            if (categoryId != 0)
            {
                query = query.Where(s => s.CategoryId == categoryId);
            }
            if (!string.IsNullOrEmpty(keyword))
            {
                int keywordId;
                bool isNumber = int.TryParse(keyword, out keywordId);
                if (isNumber)
                {
                    query = query.Where(s => s.Title.Contains(keyword) || s.Member.RealName.Contains(keyword) || s.BBSCategory.Name.Contains(keyword) || s.Member.NickName.Contains(keyword) || s.Subject.Contains(keyword) || s.Address.Contains(keyword) || s.Member.NickName == keyword || s.SN.ToString() == keyword || s.Member.Id == keywordId || s.Id == keywordId);
                }
                else
                {
                    query = query.Where(s => s.Title.Contains(keyword) || s.Member.RealName.Contains(keyword) || s.BBSCategory.Name.Contains(keyword) ||s.Member.NickName.Contains(keyword) || s.Subject.Contains(keyword) || s.Address.Contains(keyword) || s.Member.NickName == keyword || s.SN.ToString() == keyword || s.Member.Id == keywordId || s.Id == keywordId);
                }
            }
            return Json(new
            {
                total = query.Count(),
               
                rows = query.OrderBy(s => s.SN).ThenByDescending(s => s.CreateTime).Skip((page - 1) * rows).Take(rows).Select(s => new
                {
                    s.AllowComment,
                    //s.CategoryId,
                    s.CommentCount,
                    s.Counter,
                    s.CreateTime,
                    s.Id,
                    s.IsBackgroundArticle,
                    MemberId = s.Member.NickName,
                    s.ReadCount,
                    s.ShowComment,
                    s.SN,
                    s.Subject,
                    s.Title,
                    //s.MemberId,
                    NickName = s.Member.NickName,
                    s.Paths,
                    s.Address,
                     CategoryName = s.BBSCategory.Name,
                    s.DateTime,
                    s.Payment,
                    s.PeopleEnd,
                    s.PeopleStart,
                    s.Content
                }).ToList()
            });
        }

        public JsonResult Add(BBSArticle BBSArticle)
        {
            XDDDbContext ctx = new XDDDbContext();
            string classify = HttpContext.Request.Form["CategoryName"];
            var target = ctx.BBSArticles.FirstOrDefault(s => s.Id==BBSArticle.Id);
            if (target == null)
            {
                BBSArticle.CategoryId = ctx.BBSCategories.FirstOrDefault(c => c.Name == classify).Id;
                BBSArticle.CreateTime = DateTime.Now;
                BBSArticle.MemberId = ctx.Members.FirstOrDefault(x=>x.IsVirtualMember==true).Id;
                ctx.BBSArticles.Add(BBSArticle);
                ctx.SaveChanges();
                return Json(new { ResultCode = 1, message = "删除成功" });

            }
            else {
                return Json(new { ResultCode = 0, message = "添加失败" });

            }
        }

        public JsonResult Edit(BBSArticle BBSArticle)
        {
            XDDDbContext ctx = new XDDDbContext();
            string classify = HttpContext.Request.Form["CategoryName"];

            var target = ctx.BBSArticles.FirstOrDefault(s => s.Id ==BBSArticle.Id );
            if (target == null)
            {
                return Json(new { ResultCode = 0, Message = "没有找到要修改的项" });
            }
            else
            {
               
                    target.CategoryId = int.Parse(classify);
                    target.Subject = BBSArticle.Subject;
                    target.Title = BBSArticle.Title;
                    target.SN = BBSArticle.SN;
                    target.CommentCount = BBSArticle.CommentCount;
                    target.Counter = BBSArticle.Counter;
                    target.ReadCount = BBSArticle.ReadCount;
                    target.Counter = BBSArticle.Counter;
                    target.IsBackgroundArticle = BBSArticle.IsBackgroundArticle;
                    target.AllowComment = BBSArticle.AllowComment;
                    target.ShowComment = BBSArticle.ShowComment;
                    ctx.SaveChanges();
                    return Json(new { ResultCode = 1, Message = "修改成功" });
                
            
            }
        }
        [ValidateInput(false)]
        public JsonResult Change(BBSArticle BBSArticle)
        {
            string classify = HttpContext.Request.Form["CategoryName"];
            var target = Context.BBSArticles.FirstOrDefault(s => s.Id == BBSArticle.Id);
            if (target != null)
            {
                target.CategoryId = int.Parse(classify);
                target.Subject = BBSArticle.Subject;
                target.Title = BBSArticle.Title;
                target.SN = BBSArticle.SN;
                target.CommentCount = BBSArticle.CommentCount;
                target.Counter = BBSArticle.Counter;
                target.ReadCount = BBSArticle.ReadCount;
                target.Counter = BBSArticle.Counter;
                target.IsBackgroundArticle = BBSArticle.IsBackgroundArticle;
                target.AllowComment = BBSArticle.AllowComment;
                target.ShowComment = BBSArticle.ShowComment;
                target.Content = HtmlSaferAnalyser.ToSafeHtml(BBSArticle.Content,false);
                if (Request.Files.Count > 0)
                {
                    var file = Request.Files[0];
                    string uploadPath = Server.MapPath("~/Images/BBSCategories/");
                    if (!Directory.Exists(uploadPath))
                    {
                        Directory.CreateDirectory(uploadPath);
                    }
                    string name = DateTime.Now.ToString("b-yyyyMMddHHmmssfff");
                    if (ImageWorker.IsValidImage(file))
                    {
                        ImageFormat imageFormat;
                        switch (Path.GetExtension(file.FileName).ToLower())
                        {
                            case ".jpeg":
                                imageFormat = ImageFormat.Jpeg;
                                break;
                            case ".png":
                                imageFormat = ImageFormat.Png;
                                break;
                            case ".gif":
                                imageFormat = ImageFormat.Gif;
                                break;
                            case ".jpg":
                                imageFormat = ImageFormat.Jpeg;
                                break;
                            default:
                                return Json(new { ResultCode = 0, message = "只接受jpg/png/gif图片" });
                        }
                        //保存
                        ImageWorker.MakeThumbnail(file, string.Format("{0}{1}{2}", uploadPath, name, Path.GetExtension(file.FileName).ToLower()), 900, 9999, "W", imageFormat);
                        ImageWorker.MakeThumbnail(file, string.Format("{0}{1}{2}", uploadPath, name.Replace("b-", "s-"), Path.GetExtension(file.FileName).ToLower()), 360, 9999, "W", imageFormat);
                        string domain = WebConfigurationManager.AppSettings["domain"];
                        target.Paths = domain + "/Images/BBSCategories/" + name + Path.GetExtension(file.FileName).ToLower();
                    }
                    else
                    {
                        return Json(new { ResultCode = 0, message = "图片格式有误" });
                    }
                }
                Context.SaveChanges();
                return Json(new { ResultCode = 1, Message = "修改成功" });

            }
            else
            {
                return Json(new { ResultCode = 0, Message = "参数错误" });
            }
        }

        public JsonResult GetCategoryComboData()
        {
            return Json(Context.BBSCategories.Where(s => s.Enable).OrderBy(s => s.SN).Select(s => new
            {
                v = s.Id,
                t = s.Name
            }).ToList(),JsonRequestBehavior.AllowGet);
        }


        public JsonResult UploadImg()
        {
            List<String> list = new List<string>();
            for (int i = 0; i < Request.Files.Count; i++)
            {
                var file = Request.Files[i];
                var p = "/Images/Upload/" + DateTime.Now.ToString("yyyyMMdd") + "/";
                string uploadPath = Server.MapPath(p);
                if (!Directory.Exists(uploadPath))
                {
                    Directory.CreateDirectory(uploadPath);
                }
                string name = DateTime.Now.ToString("HHmmssfff" + Guid.NewGuid().ToString().Split('-')[0]);
                if (ImageWorker.IsValidImage(file))
                {  ImageFormat imageFormat;
                    switch (Path.GetExtension(file.FileName).ToLower())
                    {
                        case ".jpeg":
                            imageFormat = ImageFormat.Jpeg;
                            break;
                        case ".png":
                            imageFormat = ImageFormat.Png;
                            break;
                        case ".gif":
                            imageFormat = ImageFormat.Gif;
                            break;
                        case ".jpg":
                            imageFormat = ImageFormat.Jpeg;
                            break;
                        default:

                            continue;
                    }

                    //保存
                    ImageWorker.MakeThumbnail(file, string.Format("{0}{1}{2}", uploadPath, name, Path.GetExtension(file.FileName).ToLower()), 900, 9999, "W", imageFormat);
                    string domain = WebConfigurationManager.AppSettings["domain"];
                    list.Add(domain + p + name + Path.GetExtension(file.FileName).ToLower());
                }

            }
            return Json(new
            {
                errno = 0,
                data = list
            });

        }
    }
   


}